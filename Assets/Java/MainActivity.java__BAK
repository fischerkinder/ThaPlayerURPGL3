package com.pvr.player;
import android.graphics.SurfaceTexture;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.opengl.GLES11Ext;
import android.opengl.GLES30;
import android.os.Bundle;
import android.util.Log;
import android.view.Surface;
import com.unity3d.player.UnityPlayer;
import com.unity3d.player.UnityPlayerActivity;

import java.io.File;
import java.io.IOException;

import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import java.util.Random;
import android.os.Handler;
import android.os.Looper;

public class MainActivity extends UnityPlayerActivity {

    private SurfaceTexture mSurfaceTexture;
    private Surface mSurface;
    private MediaPlayer mMediaPlayer;
    private boolean mIsFrameAvailable = false;
    private final String TAG = "TestPlayer";
	
	private Rect rec;
    private Paint p;
    private Random rnd;
	Handler hnd;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if(mSurface != null){
            mSurface.release();
            mSurface = null;
        }
        if(mSurfaceTexture != null){
            mSurfaceTexture.release();
            mSurfaceTexture = null;
        }
        if(mMediaPlayer != null){
            mMediaPlayer.release();
            mMediaPlayer = null;
        }
    }

    public void initSurface() {
        Log.i(TAG,"initSurface");
        int textures[] = new int[1];
        GLES30.glActiveTexture(GLES30.GL_TEXTURE0);
        GLES30.glGenTextures(1, textures, 0);
        int textureId = textures[0];
        GLES30.glBindTexture(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, textureId);
        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_MIN_FILTER, GLES30.GL_LINEAR);
        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_MAG_FILTER, GLES30.GL_LINEAR);
        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_WRAP_S, GLES30.GL_CLAMP_TO_EDGE);
        GLES30.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES, GLES30.GL_TEXTURE_WRAP_T, GLES30.GL_CLAMP_TO_EDGE);
        mSurfaceTexture = new SurfaceTexture(textureId);
        mSurfaceTexture.setDefaultBufferSize(640, 360);
        mSurface = new Surface(mSurfaceTexture);
        mSurfaceTexture.setOnFrameAvailableListener(new SurfaceTexture.OnFrameAvailableListener() {
            @Override
            public void onFrameAvailable(SurfaceTexture surfaceTexture) {
                mIsFrameAvailable = true;
                Log.i(TAG,"onFrameAvailable");
                UnityPlayer.UnitySendMessage("Quad", "UpdateTexImage", "");
            }
        });
		
        //initMediaPlayer();
		rec = new Rect(0,0,640,360);
        p = new Paint();
        rnd = new Random();
        hnd = new Handler(Looper.getMainLooper());

        drawRandomCirclesInSurface();
    }
	
	
	
	 private void drawRandomCirclesInSurface() {
        Canvas c = mSurface.lockCanvas(rec);
        p.setColor(Color.argb( 255, rnd.nextInt(255),rnd.nextInt(255),rnd.nextInt(255)));
        int radius = rnd.nextInt(100);
        c.drawCircle(rnd.nextInt(640),rnd.nextInt(360),radius,p);
        mSurface.unlockCanvasAndPost(c);

       hnd.postDelayed(new Runnable() {
           @Override
           public void run() {
               drawRandomCirclesInSurface();
           }
       },100);
    }
	
	
    private void initMediaPlayer(){
        Log.i(TAG,"initMediaPlayer");
        if(mMediaPlayer == null){
            mMediaPlayer = new MediaPlayer();
        }
        if(mSurface != null){
            mMediaPlayer.setSurface(mSurface);
        }
        try {
            File file = new File("/storage/emulated/0/sdcard/1.mp4");
            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
            mMediaPlayer.setDataSource(Uri.fromFile(file).toString());
            mMediaPlayer.prepareAsync();
        } catch (IOException e) {
            e.printStackTrace();
        }
        mMediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
            @Override
            public void onPrepared(MediaPlayer mp) {
                Log.i(TAG,"MediaPlayer onPrepared");
                mMediaPlayer.start();
            }
        });
    }

    public void updateTexImage() {
        if (mIsFrameAvailable) {
            Log.i(TAG,"updateTexImage");
            mSurfaceTexture.updateTexImage();
        }
        mIsFrameAvailable = false;
    }

}